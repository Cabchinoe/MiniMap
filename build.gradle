buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
        classpath 'net.sf.proguard:proguard-gradle:5.2.1'
    }
}

apply plugin: 'forge'

def svnversion = 0
def javaversion = 0
if (project.getProject().hasProperty("svnversion")) {
    svnversion = project.getProperties()["svnversion"]
}
if (project.getProject().hasProperty("javaversion"))  {
    javaversion = project.getProperties()["javaversion"]
}

version = svnversion + "-" + javaversion
group = "com.cabchinoe.MiniMap" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "MiniMap-1.7.10"

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
    at 'src/main/resources/pubact.cfg'
    runDir = "eclipse"
    replace "@VERSION@", project.version
}

jar {
    manifest {
    }
}

compileJava {
    options.compilerArgs += ["-XDignore.symbol.file"]
    options.fork = true
    options.forkOptions.executable = 'javac'
}

tasks.withType(JavaCompile) {
    println "++++++++++++++++"
    options.encoding = "UTF-8"

    println 'Compiler args: ' + options.compilerArgs
}

configurations {
    embed
    compile.extendsFrom(embed)
}


//Add dependencies to the JAR
jar {
    from configurations.embed.collect { it.isDirectory() ? it : zipTree(it) }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}


idea {
    module {
        inheritOutputDirs = true
    }
}
